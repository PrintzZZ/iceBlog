import{_ as s,c as i,G as a,b as e}from"./chunks/framework.CoKB2z99.js";const n=JSON.parse('{"title":"Github Actions 推送到不同的仓库","description":"使用 Github Actions 推送到不同的仓库","frontmatter":{"title":"Github Actions 推送到不同的仓库","tags":["网站建设"],"categories":["随便说说"],"date":"2025-01-10T00:00:00.000Z","description":"使用 Github Actions 推送到不同的仓库","articleGPT":"这篇文章介绍了如何使用 Github Actions 将代码推送到不同的仓库，主要讲解了如何将源代码与打包后的文件分开存储，以保护源代码的隐私性。文章详细说明了配置过程和所需的关键参数设置。","references":[{"title":"将GitHub设置成Token","url":"https://blog.csdn.net/weixin_43908355/article/details/141404321"}],"head":[["link",{"rel":"canonical","href":"https://blog.iceooh.com/posts/2025/0110"}]]},"headers":[],"relativePath":"posts/2025/0110.md","filePath":"posts/2025/0110.md","lastUpdated":1736477865000}');const t=s({name:"posts/2025/0110.md"},[["render",function(s,n,t,l,p,h){return e(),i("div",null,n[0]||(n[0]=[a('<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>上篇博客介绍了如何使用 Github Actions 推送到 Github Pages 与 个人服务器上，并使用 Github Actions 实现自动部署。该流程使用了同一个仓库，导致我们的源代码与打包后的文件都存储在同一个仓库中，又因为Github Page的限制，我们必须将仓库公开，对隐私数据敏感的我们来说，这显然是不合理的。所以，我们需要将源代码与打包后的文件分开存储，并使用 Github Actions 推送到不同的仓库。</p><p>我们将源代码存储在 <code>UserName/Example_Dev</code> 仓库中并隐藏，将打包后的文件存储在 <code>UserName/Example_Public</code> 仓库中并公开。</p><blockquote><p>UserName/Example_Public 仓库将作为 GitHub Pages 的根目录，域名为 <code>https://UserName.github.io/Example_Public</code>。</p></blockquote><h2 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h2><p>仅需做两个简单的修改，在 <code>.github/workflows/deploy.yml</code> 文件中，配置我们要推送到哪个仓库，这里我们将<code>JamesIves/github-pages-deploy-action@v4</code>自动生成的gh-pages分支推送到<code>UserName/Example_Public</code>仓库中，他会自动的配置目标仓库的GitHub Pages并直接部署，非常方便。</p><p>这在之前我们需要github中生成一个token，并将其设置为私有仓库的secrets，可以参考<a href="https://blog.csdn.net/weixin_43908355/article/details/141404321" target="_blank" rel="noreferrer">将GitHub设置成Token</a></p><ul><li>添加一个 <code>branch</code> 的变量，指定要推送哪个分支，这里 <code>gh-pages</code>。</li><li>添加一个 <code>folder</code> 的变量，指定要推送哪个文件夹，例如 <code>.vitepress/dist</code>。</li><li>添加一个 <code>repository-name</code> 的变量，指定要推送到哪个仓库，例如 <code>UserName/Example_Public</code>。</li><li>添加一个 <code>token</code> 的变量，以获取目标仓库的权限，例如 <code>DEPLOY_TOKEN</code>。</li></ul><div class="language-yaml vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 第三步：部署到公开仓库的 GitHub Pages</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">部署到GitHub Pages 🚀</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">JamesIves/github-pages-deploy-action@v4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          branch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">gh-pages</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          folder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.vitepress/dist</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          repository-name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">UserName/Example_Public</span></span>\n<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">${{ secrets.DEPLOY_TOKEN }}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过以上步骤，我们成功地将源代码与打包后的文件分开存储，并使用 Github Actions 一键推送到不同的仓库。实现源代码与打包后的文件分开存储。 本地源代码下执行以下命令，确保将源代码推送到 <code>UserName/Example_Dev</code> 仓库中。<strong>注意不是 <code>UserName/Example_Public</code> 仓库。</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 查看远程仓库</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set-url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/UserName/Example_Dev.git</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 设置远程仓库</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 添加文件</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;update&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 提交文件</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # 推送代码</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',12)]))}]]);export{n as __pageData,t as default};
